from abc import ABCMeta, abstractmethod


class Indicator(object):
    """
    Indicator is an abstract base class providing an interface for
    all subsequent (inherited) Indicator objects.

    The goal of a (derived) Indicator object is to calculate Values
    for particular symbols based on the inputs of Bars
    (OLHCVI) generated by a DataHandler object.

    This is designed to work both with historic and live data as
    the Indicator object is agnostic to the data source,
    since it obtains the bar tuples from a queue object.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def calculate_indicator(self, data, is_new_candle, is_last_candle):
        """
        Provides the mechanisms to calculate the list of indicator values.
        """
        raise NotImplementedError("Should implement calculate_indicator()")

    @abstractmethod
    def return_value(self, shift, timestamp):
        """
        Returns the indicator value of a symbol shift bars ago
        """
        raise NotImplementedError("Should implement return_value()")

    @abstractmethod
    def return_all_values(self, timestamp):
        """
        Returns all indicator values
        """
        raise NotImplementedError("Should implement return_all_values()")
